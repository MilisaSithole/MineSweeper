/* autogenerated by Processing revision 1293 on 2024-05-06 */
import processing.core.*;
import processing.data.*;
import processing.event.*;
import processing.opengl.*;

import java.util.HashMap;
import java.util.ArrayList;
import java.io.File;
import java.io.BufferedReader;
import java.io.PrintWriter;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.IOException;

public class MineSweeper extends PApplet {

int rows = 20, cols = 20;
int numBombs = 60;
float wid;
int hidden = color(50, 132, 255);
int lineCol = color(40, 125, 255);
int shown = color(51);

Board board;

public void setup() {
    /* size commented out by preprocessor */;
    background(51);

    wid = width / cols;
    board = new Board(rows, cols, numBombs);

    drawGrid();
}

public void draw() {
    board.drawBoard();
}

public void drawGrid(){
    for(int r = 0; r < rows; r++){
        for(int c = 0; c < cols; c++){
            fill(hidden);
            noStroke();
            rect(c * wid, r * wid, wid, wid);
        }
    }

    stroke(lineCol);
    strokeWeight(1);
    for(int r = 0; r <= rows; r++){
        line(0, r * wid, width, r * wid);
        for(int c = 0; c <= cols; c++){
            line(c * wid, 0, c * wid, height);
        }
    }
}
public class Board{
    Cell[][] board;
    int rows, cols;
    int numBombs;

    int bomb = color(255, 50, 132);
    int nonBomb = color(50, 132, 255);

    public Board(int rows, int cols, int numBombs){
        this.rows = rows;
        this.cols = cols;
        this.numBombs = numBombs;

        board = new Cell[rows][cols];
        for(int r = 0; r < rows; r++)
            for(int c = 0; c < cols; c++)
                board[r][c] = new Cell();
        assignBombs();
    }

    public void assignBombs(){
        int[] chosenIndexes = new int[numBombs];
        
        int count = 0;
        while(count < numBombs){
            int num = (int)random(rows * cols);
            boolean found = false;
            for(int i = 0; i < chosenIndexes.length; i++)
                if(chosenIndexes[i] == num){
                    found = true;
                    break;
                }

            if(found) continue;
            else{
                chosenIndexes[count] = num;
                count++;
            }
        }

        for(int idx: chosenIndexes){
            int r = idx / cols;
            int c = idx % cols;
            board[r][c].setBomb();
        }
    }

    public void drawBoard(){
        float wid = width / cols;

        for(int r = 0; r < rows; r++){
            for(int c = 0; c < cols; c++){
                if(board[r][c].isBomb())
                    fill(bomb);
                else
                    fill(nonBomb);

                noStroke();
                rect(c * wid, r * wid, wid, wid);
            }
        }
    }
}

class Cell{
    boolean isBomb;
    int number;
    boolean isFlagged = false;
    boolean revealed = false;

    public Cell(){
        isBomb = false;
        number = 0;
    }

    public void setBomb(){
        isBomb = true;
    }

    public boolean isBomb(){
        return isBomb;
    }
}


  public void settings() { size(800, 800); }

  static public void main(String[] passedArgs) {
    String[] appletArgs = new String[] { "MineSweeper" };
    if (passedArgs != null) {
      PApplet.main(concat(appletArgs, passedArgs));
    } else {
      PApplet.main(appletArgs);
    }
  }
}
